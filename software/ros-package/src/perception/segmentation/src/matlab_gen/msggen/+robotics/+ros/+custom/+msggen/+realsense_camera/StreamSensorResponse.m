classdef StreamSensorResponse < robotics.ros.Message
    %StreamSensorResponse MATLAB implementation of realsense_camera/StreamSensorResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'realsense_camera/StreamSensorResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '27bb6b26709cd7555e9a09362b7c10b3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        CloudXYZ
        CloudRGB
        RawDepth
        ColorCamIntrinsics
        DepthCamIntrinsics
        Depth2colorExtrinsics
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CloudRGB', 'CloudXYZ', 'ColorCamIntrinsics', 'Depth2colorExtrinsics', 'DepthCamIntrinsics', 'RawDepth'} % List of non-constant message properties
        ROSPropertyList = {'cloudRGB', 'cloudXYZ', 'colorCamIntrinsics', 'depth2colorExtrinsics', 'depthCamIntrinsics', 'rawDepth'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = StreamSensorResponse(msg)
            %StreamSensorResponse Construct the message object StreamSensorResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function cloudxyz = get.CloudXYZ(obj)
            %get.CloudXYZ Get the value for property CloudXYZ
            javaArray = obj.JavaMessage.getCloudXYZ;
            array = obj.readJavaArray(javaArray, 'single');
            cloudxyz = single(array);
        end
        
        function set.CloudXYZ(obj, cloudxyz)
            %set.CloudXYZ Set the value for property CloudXYZ
            if ~isvector(cloudxyz) && isempty(cloudxyz)
                % Allow empty [] input
                cloudxyz = single.empty(0,1);
            end
            
            validateattributes(cloudxyz, {'numeric'}, {'vector'}, 'StreamSensorResponse', 'CloudXYZ');
            
            javaArray = obj.JavaMessage.getCloudXYZ;
            array = obj.writeJavaArray(cloudxyz, javaArray, 'single');
            obj.JavaMessage.setCloudXYZ(array);
        end
        
        function cloudrgb = get.CloudRGB(obj)
            %get.CloudRGB Get the value for property CloudRGB
            javaArray = obj.JavaMessage.getCloudRGB;
            array = obj.readJavaArray(javaArray, 'uint8');
            cloudrgb = uint8(array);
        end
        
        function set.CloudRGB(obj, cloudrgb)
            %set.CloudRGB Set the value for property CloudRGB
            if ~isvector(cloudrgb) && isempty(cloudrgb)
                % Allow empty [] input
                cloudrgb = uint8.empty(0,1);
            end
            
            validateattributes(cloudrgb, {'numeric'}, {'vector'}, 'StreamSensorResponse', 'CloudRGB');
            
            javaArray = obj.JavaMessage.getCloudRGB;
            array = obj.writeJavaArray(cloudrgb, javaArray, 'uint8');
            obj.JavaMessage.setCloudRGB(array);
        end
        
        function rawdepth = get.RawDepth(obj)
            %get.RawDepth Get the value for property RawDepth
            javaArray = obj.JavaMessage.getRawDepth;
            array = obj.readJavaArray(javaArray, 'single');
            rawdepth = single(array);
        end
        
        function set.RawDepth(obj, rawdepth)
            %set.RawDepth Set the value for property RawDepth
            if ~isvector(rawdepth) && isempty(rawdepth)
                % Allow empty [] input
                rawdepth = single.empty(0,1);
            end
            
            validateattributes(rawdepth, {'numeric'}, {'vector'}, 'StreamSensorResponse', 'RawDepth');
            
            javaArray = obj.JavaMessage.getRawDepth;
            array = obj.writeJavaArray(rawdepth, javaArray, 'single');
            obj.JavaMessage.setRawDepth(array);
        end
        
        function colorcamintrinsics = get.ColorCamIntrinsics(obj)
            %get.ColorCamIntrinsics Get the value for property ColorCamIntrinsics
            javaArray = obj.JavaMessage.getColorCamIntrinsics;
            array = obj.readJavaArray(javaArray, 'single');
            colorcamintrinsics = single(array);
        end
        
        function set.ColorCamIntrinsics(obj, colorcamintrinsics)
            %set.ColorCamIntrinsics Set the value for property ColorCamIntrinsics
            if ~isvector(colorcamintrinsics) && isempty(colorcamintrinsics)
                % Allow empty [] input
                colorcamintrinsics = single.empty(0,1);
            end
            
            validateattributes(colorcamintrinsics, {'numeric'}, {'vector'}, 'StreamSensorResponse', 'ColorCamIntrinsics');
            
            javaArray = obj.JavaMessage.getColorCamIntrinsics;
            array = obj.writeJavaArray(colorcamintrinsics, javaArray, 'single');
            obj.JavaMessage.setColorCamIntrinsics(array);
        end
        
        function depthcamintrinsics = get.DepthCamIntrinsics(obj)
            %get.DepthCamIntrinsics Get the value for property DepthCamIntrinsics
            javaArray = obj.JavaMessage.getDepthCamIntrinsics;
            array = obj.readJavaArray(javaArray, 'single');
            depthcamintrinsics = single(array);
        end
        
        function set.DepthCamIntrinsics(obj, depthcamintrinsics)
            %set.DepthCamIntrinsics Set the value for property DepthCamIntrinsics
            if ~isvector(depthcamintrinsics) && isempty(depthcamintrinsics)
                % Allow empty [] input
                depthcamintrinsics = single.empty(0,1);
            end
            
            validateattributes(depthcamintrinsics, {'numeric'}, {'vector'}, 'StreamSensorResponse', 'DepthCamIntrinsics');
            
            javaArray = obj.JavaMessage.getDepthCamIntrinsics;
            array = obj.writeJavaArray(depthcamintrinsics, javaArray, 'single');
            obj.JavaMessage.setDepthCamIntrinsics(array);
        end
        
        function depth2colorextrinsics = get.Depth2colorExtrinsics(obj)
            %get.Depth2colorExtrinsics Get the value for property Depth2colorExtrinsics
            javaArray = obj.JavaMessage.getDepth2colorExtrinsics;
            array = obj.readJavaArray(javaArray, 'single');
            depth2colorextrinsics = single(array);
        end
        
        function set.Depth2colorExtrinsics(obj, depth2colorextrinsics)
            %set.Depth2colorExtrinsics Set the value for property Depth2colorExtrinsics
            if ~isvector(depth2colorextrinsics) && isempty(depth2colorextrinsics)
                % Allow empty [] input
                depth2colorextrinsics = single.empty(0,1);
            end
            
            validateattributes(depth2colorextrinsics, {'numeric'}, {'vector'}, 'StreamSensorResponse', 'Depth2colorExtrinsics');
            
            javaArray = obj.JavaMessage.getDepth2colorExtrinsics;
            array = obj.writeJavaArray(depth2colorextrinsics, javaArray, 'single');
            obj.JavaMessage.setDepth2colorExtrinsics(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.CloudXYZ = obj.CloudXYZ;
            cpObj.CloudRGB = obj.CloudRGB;
            cpObj.RawDepth = obj.RawDepth;
            cpObj.ColorCamIntrinsics = obj.ColorCamIntrinsics;
            cpObj.DepthCamIntrinsics = obj.DepthCamIntrinsics;
            cpObj.Depth2colorExtrinsics = obj.Depth2colorExtrinsics;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.CloudXYZ = strObj.CloudXYZ;
            obj.CloudRGB = strObj.CloudRGB;
            obj.RawDepth = strObj.RawDepth;
            obj.ColorCamIntrinsics = strObj.ColorCamIntrinsics;
            obj.DepthCamIntrinsics = strObj.DepthCamIntrinsics;
            obj.Depth2colorExtrinsics = strObj.Depth2colorExtrinsics;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.CloudXYZ = obj.CloudXYZ;
            strObj.CloudRGB = obj.CloudRGB;
            strObj.RawDepth = obj.RawDepth;
            strObj.ColorCamIntrinsics = obj.ColorCamIntrinsics;
            strObj.DepthCamIntrinsics = obj.DepthCamIntrinsics;
            strObj.Depth2colorExtrinsics = obj.Depth2colorExtrinsics;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.realsense_camera.StreamSensorResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.realsense_camera.StreamSensorResponse;
            obj.reload(strObj);
        end
    end
end
